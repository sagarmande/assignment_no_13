class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def reverseAlternateKNodes(head, k):
    if head is None or k <= 1:
        return head

    current = head
    prev = None
    next_node = None
    count = 0

    # Reverse the first k nodes
    while current is not None and count < k:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
        count += 1

    # Skip the next k nodes
    while current is not None and count < 2 * k:
        current = current.next
        count += 1

    # Recursively reverse alternate k nodes starting from the next group
    if current is not None:
        head.next = reverseAlternateKNodes(current, k)

    return prev

# Creating the linked list
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)
head.next.next.next.next.next = Node(6)
head.next.next.next.next.next.next = Node(7)
head.next.next.next.next.next.next.next = Node(8)
head.next.next.next.next.next.next.next.next = Node(9)
head.next.next.next.next.next.next.next.next.next = Node(10)

# Reversing every alternate 3 nodes in the linked list
new_head = reverseAlternateKNodes(head, 3)

# Printing the modified linked list
current = new_head
while current:
    print(current.data, end=" ")
    current = current.next

# Output: 3 2 1 4 5 6 9 8 7 10
